// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MindHub.DAL;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MindHub.DAL.Migrations
{
    [DbContext(typeof(MindHubContext))]
    [Migration("20240917133948_UserTokenNullable")]
    partial class UserTokenNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MindHub.DAL.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RecordCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("RecordStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RecordUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecordCreateDate");

                    b.HasIndex("RecordStatus");

                    b.HasIndex("RecordUpdateDate");

                    b.HasIndex("UserId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("MindHub.DAL.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecordCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("RecordStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RecordUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StyleId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("ParentNodeId");

                    b.HasIndex("RecordCreateDate");

                    b.HasIndex("RecordStatus");

                    b.HasIndex("RecordUpdateDate");

                    b.HasIndex("StyleId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("MindHub.DAL.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BorderColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FontFamily")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FontSize")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecordCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("RecordStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RecordUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RecordCreateDate");

                    b.HasIndex("RecordStatus");

                    b.HasIndex("RecordUpdateDate");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("MindHub.DAL.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RecordCreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("RecordStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RecordUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RecordCreateDate");

                    b.HasIndex("RecordStatus");

                    b.HasIndex("RecordUpdateDate");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MindHub.DAL.Map", b =>
                {
                    b.HasOne("MindHub.DAL.User", "User")
                        .WithMany("Maps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindHub.DAL.Node", b =>
                {
                    b.HasOne("MindHub.DAL.Map", "Map")
                        .WithMany("Nodes")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MindHub.DAL.Node", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MindHub.DAL.Style", "Style")
                        .WithMany("Nodes")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Map");

                    b.Navigation("ParentNode");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("MindHub.DAL.Map", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("MindHub.DAL.Style", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("MindHub.DAL.User", b =>
                {
                    b.Navigation("Maps");
                });
#pragma warning restore 612, 618
        }
    }
}
